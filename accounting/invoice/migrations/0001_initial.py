# -*- coding: utf-8 -*-
# Generated by Django 1.11.8 on 2017-12-28 10:42
from __future__ import unicode_literals

from decimal import Decimal
import uuid

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
import djmoney.models.fields
import taggit.managers

import accounting.invoice.models
import accounting.invoice.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0002_auto_20171228_1042'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalInvoice',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The universally unique identifier for this model instance.', verbose_name='UUID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('number', models.CharField(default=accounting.invoice.utils.default_invoice_number, help_text='The unique invoice number. Defaults to yyyy-mm for the current year and month.', max_length=80)),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='The date this invoice was created and sent for billing purposes. Defaults to right now, but can be changed.')),
                ('billing_start_date', models.DateTimeField(default=accounting.invoice.utils.get_first_day_past_month, help_text='The first date for which the line items in this invoice were provided. Defaults to the first day of the past month.')),
                ('billing_end_date', models.DateTimeField(default=accounting.invoice.utils.get_last_day_past_month, help_text='The last date for which the line items in this invoice were provided. Defaults to the last day of the past month.')),
                ('due_date', models.DateTimeField(default=accounting.invoice.models.get_day_with_offset, help_text='When this invoice should be paid.')),
                ('paid', models.BooleanField(default=False, help_text='Whether this invoice has been paid by the client yet or not.')),
                ('extra_text', models.TextField(blank=True, help_text='Any arbitrary extra text that the provider would like to display on their invoice. Each template should have a designated location to place this extra text.', null=True)),
                ('signature', models.TextField(blank=True, help_text="The provider's signature.", max_length=100, null=True)),
                ('template', models.CharField(choices=[('default', 'Default'), ('without_bank_account', 'Without Bank Account')], default='default', help_text='The template to use to generate this invoice.', max_length=80)),
                ('auto_download_jira_worklogs_on_save', models.BooleanField(default=False, help_text='Whether this invoice should automatically download JIRA worklogs for the provider to fill up the invoice.')),
                ('auto_create_pdf_on_save', models.BooleanField(default=False, help_text='Whether this invoice should be converted to a PDF on save.')),
                ('auto_upload_google_drive_on_save', models.BooleanField(default=False, help_text='Whether this invoice should be uploaded to Google Drive when converted to a PDF on save.')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('client', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='account.Account')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='account.Account')),
            ],
            options={
                'verbose_name': 'historical Invoice',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='The universally unique identifier for this model instance.', verbose_name='UUID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('number', models.CharField(default=accounting.invoice.utils.default_invoice_number, help_text='The unique invoice number. Defaults to yyyy-mm for the current year and month.', max_length=80)),
                ('date', models.DateTimeField(default=django.utils.timezone.now, help_text='The date this invoice was created and sent for billing purposes. Defaults to right now, but can be changed.')),
                ('billing_start_date', models.DateTimeField(default=accounting.invoice.utils.get_first_day_past_month, help_text='The first date for which the line items in this invoice were provided. Defaults to the first day of the past month.')),
                ('billing_end_date', models.DateTimeField(default=accounting.invoice.utils.get_last_day_past_month, help_text='The last date for which the line items in this invoice were provided. Defaults to the last day of the past month.')),
                ('due_date', models.DateTimeField(default=accounting.invoice.models.get_day_with_offset, help_text='When this invoice should be paid.')),
                ('paid', models.BooleanField(default=False, help_text='Whether this invoice has been paid by the client yet or not.')),
                ('extra_text', models.TextField(blank=True, help_text='Any arbitrary extra text that the provider would like to display on their invoice. Each template should have a designated location to place this extra text.', null=True)),
                ('signature', models.ImageField(blank=True, help_text="The provider's signature.", null=True, upload_to='')),
                ('template', models.CharField(choices=[('default', 'Default'), ('without_bank_account', 'Without Bank Account')], default='default', help_text='The template to use to generate this invoice.', max_length=80)),
                ('auto_download_jira_worklogs_on_save', models.BooleanField(default=False, help_text='Whether this invoice should automatically download JIRA worklogs for the provider to fill up the invoice.')),
                ('auto_create_pdf_on_save', models.BooleanField(default=False, help_text='Whether this invoice should be converted to a PDF on save.')),
                ('auto_upload_google_drive_on_save', models.BooleanField(default=False, help_text='Whether this invoice should be uploaded to Google Drive when converted to a PDF on save.')),
                ('client', models.ForeignKey(help_text='The client being invoiced for services/products.', on_delete=django.db.models.deletion.CASCADE, related_name='client_invoices', to='account.Account')),
                ('provider', models.ForeignKey(help_text='The invoicing service/product provider.', on_delete=django.db.models.deletion.CASCADE, related_name='provider_invoices', to='account.Account')),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
            },
        ),
        migrations.CreateModel(
            name='LineItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_item_id', models.IntegerField(help_text='An ID for this line item, unique with the line item key. Can be used to store incoming ID data from 3rd parties.')),
                ('key', models.CharField(help_text='The key identifier for this line item. For example: OC-9999.', max_length=100)),
                ('name', models.CharField(help_text='What the item is, i.e. a formal title or summary of the item.', max_length=255)),
                ('description', models.TextField(blank=True, help_text='What this line item is about. Optional: this will only display on invoices that have the description column.', null=True)),
                ('quantity', models.DecimalField(decimal_places=8, help_text='How many of these items should be billed.', max_digits=12)),
                ('price_currency', djmoney.models.fields.CurrencyField(choices=[('XUA', 'ADB Unit of Account'), ('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('PAB', 'Balboa'), ('BBD', 'Barbados Dollar'), ('BYN', 'Belarussian Ruble'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('BOB', 'Boliviano'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('SVC', 'El Salvador Colon'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man Pound'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXV', 'Mexican Unidad de Inversion (UDI)'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('BOV', 'Mvdol'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('SSP', 'South Sudanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('XSU', 'Sucre'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TMT', 'Turkmenistan New Manat'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('USN', 'US Dollar (Next day)'), ('UGX', 'Uganda Shilling'), ('CLF', 'Unidad de Fomento'), ('COU', 'Unidad de Valor Real'), ('UYI', 'Uruguay Peso en Unidades Indexadas (URUIURUI)'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('CHE', 'WIR Euro'), ('CHW', 'WIR Franc'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='EUR', editable=False, max_length=3)),
                ('price', djmoney.models.fields.MoneyField(decimal_places=2, default=Decimal('0.0'), help_text='How much each unit of this line item costs, including the currency.', max_digits=8)),
                ('invoice', models.ForeignKey(help_text='The invoice to which this line item belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='line_items', to='invoice.Invoice')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A special tag for this line item. Can be used to group line items by tag.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Line Item',
                'verbose_name_plural': 'Line Items',
            },
        ),
        migrations.AlterUniqueTogether(
            name='lineitem',
            unique_together=set([('line_item_id', 'key')]),
        ),
    ]
